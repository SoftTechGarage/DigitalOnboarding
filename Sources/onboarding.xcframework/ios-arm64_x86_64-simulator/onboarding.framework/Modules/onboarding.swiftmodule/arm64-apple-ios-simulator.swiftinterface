// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name onboarding
import AVFoundation
import CoreText
import DeveloperToolsSupport
import Foundation
import JitsiMeetSDK
import NFCReaderApple
import OpenSSL
import Swift
import SwiftUI
import UIKit
import Vision
import WebKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import onboarding
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
  @_Concurrency.MainActor(unsafe) public static let hasNFC: Swift.Bool
}
public protocol OnboardingBottomSheetDialogDelegate {
  func onOnboardingBottomSheetDialogSelect(index: Swift.Int)
}
@_hasMissingDesignatedInitializers open class Spinner {
  public static var style: UIKit.UIActivityIndicatorView.Style
  public static var baseBackColor: UIKit.UIColor
  public static var baseColor: UIKit.UIColor
  public static func start(style: UIKit.UIActivityIndicatorView.Style = style, backColor: UIKit.UIColor = baseBackColor, baseColor: UIKit.UIColor = baseColor)
  public static func stop()
  @objc public static func update()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ThemeManager {
  public static var shared: onboarding.ThemeManager
  public func setStyle(style: UIKit.UIUserInterfaceStyle)
  public func getStyle() -> UIKit.UIUserInterfaceStyle
  public func isLightMode() -> Swift.Bool
  @objc deinit
}
public class OnboardingTheme {
  public init(titleColor: UIKit.UIColor? = nil, borderColor: UIKit.UIColor? = nil, boxEmptyColor: UIKit.UIColor? = nil, boxFillColor: UIKit.UIColor? = nil, mainTextColor: UIKit.UIColor? = nil, revertTextColor: UIKit.UIColor? = nil, warningTextColor: UIKit.UIColor? = nil, backgroundColor: UIKit.UIColor? = nil, dialogBackgroundColor: UIKit.UIColor? = nil, buttonColor: UIKit.UIColor? = nil, buttonTextColor: UIKit.UIColor? = nil, loadingBackgroundColor: UIKit.UIColor? = nil, dialogButtonColor: UIKit.UIColor? = nil, dialogButtonTextColor: UIKit.UIColor? = nil, boxHintFillColor: UIKit.UIColor? = nil)
  @objc deinit
}
public protocol OnboardingWarningDelegate {
  func onOnboardingWarningClosed()
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func loadViewFromNib() -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) public func fillSuperview(with equalPadding: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func fillSuperview(horizontalPadding: CoreFoundation.CGFloat, verticalPadding: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func fillSuperview(with padding: UIKit.UIEdgeInsets = .zero)
  @_Concurrency.MainActor(unsafe) public func fillSafeArea(with padding: UIKit.UIEdgeInsets = .zero)
  @_Concurrency.MainActor(unsafe) public func anchor(top: UIKit.NSLayoutYAxisAnchor? = nil, leading: UIKit.NSLayoutXAxisAnchor? = nil, bottom: UIKit.NSLayoutYAxisAnchor? = nil, trailing: UIKit.NSLayoutXAxisAnchor? = nil, topPadding: CoreFoundation.CGFloat = 0, leadingPadding: CoreFoundation.CGFloat = 0, bottomPadding: CoreFoundation.CGFloat = 0, trailingPadding: CoreFoundation.CGFloat = 0, size: CoreFoundation.CGSize = .zero)
  @_Concurrency.MainActor(unsafe) public func sizeAnchor(width: CoreFoundation.CGFloat? = nil, height: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor(unsafe) public func aspect(ratio: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func centerAnchor(centerY: UIKit.NSLayoutYAxisAnchor? = nil, centerX: UIKit.NSLayoutXAxisAnchor? = nil, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) public func centerYAnchor(to item: UIKit.UIView, multiplier: CoreFoundation.CGFloat = 0, constant: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) public func centerXAnchor(to item: UIKit.UIView, multiplier: CoreFoundation.CGFloat = 0, constant: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) public func alignCenterToSuperView()
  @_Concurrency.MainActor(unsafe) public func alignCenterYToSuperView()
  @_Concurrency.MainActor(unsafe) public func alignCenterXToSuperView()
  @_Concurrency.MainActor(unsafe) public func equalWidth(with multiplier: CoreFoundation.CGFloat = 1.0, to view: UIKit.UIView)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var safeAreaTopAnchor: UIKit.NSLayoutYAxisAnchor {
    get
  }
  @_Concurrency.MainActor(unsafe) public var safeAreaLeadingAnchor: UIKit.NSLayoutXAxisAnchor {
    get
  }
  @_Concurrency.MainActor(unsafe) public var safeAreaTrailingAnchor: UIKit.NSLayoutXAxisAnchor {
    get
  }
  @_Concurrency.MainActor(unsafe) public var safeAreaBottomAnchor: UIKit.NSLayoutYAxisAnchor {
    get
  }
}
public protocol OnboardingBottomSheetDialogItemDelegate {
  func onOnboardingBottomSheetDialogItemDelegateSelect(index: Swift.Int)
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) open func makeRounded()
}
public protocol OnboardingDelegate {
  func onOnboardingResult(resultCode: onboarding.OnboardingResult, code: Swift.String, message: Swift.String, processId: Swift.String)
}
public enum OnboardingResult {
  case FAIL
  case SUCCESS
  case SUCCESS_SELF
  public static func == (a: onboarding.OnboardingResult, b: onboarding.OnboardingResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class Onboarding {
  public static var delegate: (any onboarding.OnboardingDelegate)?
  public static var language: Swift.String?
  public static func start(vc: UIKit.UINavigationController?, process: Swift.String, lng: Swift.String)
  public static func start(vc: UIKit.UINavigationController?, language: Swift.String? = nil, process: Swift.String? = nil, initialParameters: Swift.String? = nil, externalKey: Swift.String? = nil)
  public static func test(vc: UIKit.UINavigationController, parameters: Swift.String, resource: Swift.String, theme: onboarding.OnboardingTheme? = nil, endPoint: Swift.String? = nil)
  public init(vc: UIKit.UINavigationController?)
  public func setEndpoint(endPoint: Swift.String) -> onboarding.Onboarding
  public func setLanguage(language: Swift.String?) -> onboarding.Onboarding
  public func setTenant(tenant: Swift.String?) -> onboarding.Onboarding
  public func setProcess(process: Swift.String?) -> onboarding.Onboarding
  public func setJson(json: Swift.String?) -> onboarding.Onboarding
  public func setPredefined(predefined: Swift.String?) -> onboarding.Onboarding
  public func setExternalKey(externalKey: Swift.String?) -> onboarding.Onboarding
  public func setTheme(theme: onboarding.OnboardingTheme) -> onboarding.Onboarding
  public func start()
  @objc deinit
}
extension onboarding.OnboardingResult : Swift.Equatable {}
extension onboarding.OnboardingResult : Swift.Hashable {}

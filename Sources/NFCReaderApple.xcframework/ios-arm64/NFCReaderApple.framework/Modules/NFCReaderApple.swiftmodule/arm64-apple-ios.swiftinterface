// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NFCReaderApple
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Accelerate
import Combine
import CommonCrypto
import CoreGraphics
import CoreMedia
import CoreNFC
import CryptoKit
import CryptoTokenKit
import Foundation
@_exported import NFCReaderApple
import OpenSSL
import Swift
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import libtesseract
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationPublicKeyInfo : NFCReaderApple.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
extension NFCReaderApple.Tesseract {
  @_functionBuilder public struct ConfigurationBuilder {
    public static func buildBlock(_ configurations: (NFCReaderApple.TessBaseAPI) -> Swift.Void...) -> (NFCReaderApple.TessBaseAPI) -> Swift.Void
  }
}
public func set(_ variable: NFCReaderApple.Tesseract.Variable, value: Swift.String) -> (NFCReaderApple.TessBaseAPI) -> Swift.Void
extension Swift.String {
  public static let `true`: Swift.String
  public static let `false`: Swift.String
  public static func integer<A>(_ value: A) -> Swift.String where A : Swift.BinaryInteger
  public static func double(_ value: Swift.Double) -> Swift.String
}
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: NFCReaderApple.PassportAuthenticationStatus, b: NFCReaderApple.PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NFCPassportModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var residenceAddress: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var documentSigningCertificate: NFCReaderApple.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: NFCReaderApple.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [NFCReaderApple.DataGroupId] {
    get
  }
  public var dataGroupsRead: [NFCReaderApple.DataGroupId : NFCReaderApple.DataGroup] {
    get
  }
  public var dataGroupHashes: [NFCReaderApple.DataGroupId : NFCReaderApple.DataGroupHash] {
    get
  }
  public var cardAccess: NFCReaderApple.CardAccess? {
    get
  }
  public var BACStatus: NFCReaderApple.PassportAuthenticationStatus {
    get
  }
  public var PACEStatus: NFCReaderApple.PassportAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: NFCReaderApple.PassportAuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [any Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: NFCReaderApple.DataGroupId, dataGroup: NFCReaderApple.DataGroup)
  public func getDataGroup(_ id: NFCReaderApple.DataGroupId) -> NFCReaderApple.DataGroup?
  public func dumpPassportData(selectedDataGroups: [NFCReaderApple.DataGroupId], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [NFCReaderApple.DataGroupId : [Swift.UInt8]]
  public func verifyPassport(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
extension CoreVideo.CVBuffer {
  @available(iOS 13.0, *)
  public func sharpness() -> Swift.Float?
  public func cgImage(withOrientation orientation: ImageIO.CGImagePropertyOrientation) -> CoreGraphics.CGImage?
}
extension CoreMedia.CMSampleBuffer {
  public func cgImage(withOrientation orientation: ImageIO.CGImagePropertyOrientation) -> CoreGraphics.CGImage?
}
public protocol LanguageModelDataSource {
  var pathToTrainedData: Swift.String { get }
}
extension Foundation.Bundle : NFCReaderApple.LanguageModelDataSource {
  public var pathToTrainedData: Swift.String {
    get
  }
}
public enum RecognitionLanguage {
  case afrikaans
  case albanian
  case amharic
  case arabic
  case assamese
  case azerbaijani
  case azerbaijaniCyrillic
  case basque
  case belarusian
  case bengali
  case bosnian
  case bulgarian
  case burmese
  case catalanAndValencian
  case cebuano
  case centralKhmer
  case chineseSimplified
  case chineseTraditional
  case croatian
  case czech
  case cherokee
  case danish
  case dutchFlemish
  case dzongkha
  case english
  case englishMiddle
  case esperanto
  case estonian
  case finnish
  case frankish
  case french
  case frenchMiddle
  case galician
  case georgian
  case georgianOld
  case german
  case greekAncient
  case greekModern
  case guajarati
  case haitian
  case hebrew
  case hindi
  case hungarian
  case icelandic
  case inuktitut
  case indonesian
  case italian
  case italianOld
  case irish
  case javanese
  case japanese
  case kannada
  case kazakh
  case korean
  case kurdish
  case kyrgyz
  case lao
  case latin
  case lithuanian
  case malayalam
  case macedonian
  case malay
  case maltese
  case marathi
  case nepali
  case norwegian
  case oriya
  case pashto
  case persian
  case polish
  case portugese
  case punjabi
  case romanian
  case russian
  case sanskrit
  case serbian
  case serbianLatin
  case sinhala
  case slovak
  case slovenian
  case spanish
  case spanishOld
  case swahili
  case swedish
  case syriac
  case tamil
  case tagalog
  case tajik
  case telugu
  case thai
  case tibetan
  case tigrinya
  case turkish
  case uighur
  case ukrainian
  case urdu
  case uzbek
  case uzbekCyrillic
  case vietnamese
  case welsh
  case yiddish
  case custom(Swift.String)
}
extension NFCReaderApple.RecognitionLanguage : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [NFCReaderApple.SecurityInfo] {
    get
  }
  @objc deinit
}
public protocol NFCReaderDelegate : AnyObject {
  @available(iOS 13, *)
  func didSuccess(data: NFCReaderApple.NFCPassportModel)
  func didFail(message: Swift.String)
  func resultScanner(didFind result: NFCReaderApple.MrzScanResult)
}
@_hasMissingDesignatedInitializers public class CoreReader {
  open var lang: Swift.String
  public static let sharedInstace: NFCReaderApple.CoreReader
  weak public var delegate: (any NFCReaderApple.NFCReaderDelegate)?
  public func readChip(resulat: NFCReaderApple.MrzScanResult)
  @objc deinit
}
extension NFCReaderApple.Tesseract {
  public func recognizedBlocks(from imageData: Foundation.Data, for levels: [NFCReaderApple.PageIteratorLevel]) -> Swift.Result<(Swift.String, [NFCReaderApple.PageIteratorLevel : [NFCReaderApple.RecognizedBlock]]), NFCReaderApple.Tesseract.Error>
  public func recognizedBlocks(from imageData: Foundation.Data, for level: NFCReaderApple.PageIteratorLevel) -> Swift.Result<(Swift.String, [NFCReaderApple.RecognizedBlock]), NFCReaderApple.Tesseract.Error>
}
public struct RecognizedBlock {
  public let text: Swift.String
  public let boundingBox: NFCReaderApple.BoundingBox
  public let confidence: Swift.Float
}
public struct BoundingBox {
  public var left: Swift.Int32 {
    get
  }
  public var top: Swift.Int32 {
    get
  }
  public var right: Swift.Int32 {
    get
  }
  public var bottom: Swift.Int32 {
    get
  }
}
extension NFCReaderApple.BoundingBox {
  public var cgRect: CoreFoundation.CGRect {
    get
  }
}
extension NFCReaderApple.Tesseract.Error {
  public static func iteratorLevelNotFoundInDictionary(_ level: NFCReaderApple.PageIteratorLevel) -> NFCReaderApple.Tesseract.Error
}
public typealias PageIteratorLevel = libtesseract.TessPageIteratorLevel
extension libtesseract.TessPageIteratorLevel : Swift.Hashable {
}
extension libtesseract.TessPageIteratorLevel {
  public static let block: libtesseract.TessPageIteratorLevel
  public static let paragraph: libtesseract.TessPageIteratorLevel
  public static let textline: libtesseract.TessPageIteratorLevel
  public static let word: libtesseract.TessPageIteratorLevel
  public static let symbol: libtesseract.TessPageIteratorLevel
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
public typealias TessBaseAPI = Swift.OpaquePointer
@_hasMissingDesignatedInitializers public class Tesseract {
  convenience public init(languages: [NFCReaderApple.RecognitionLanguage], dataSource: any NFCReaderApple.LanguageModelDataSource = Bundle.main, engineMode: NFCReaderApple.EngineMode = .lstmOnly, @NFCReaderApple.Tesseract.ConfigurationBuilder configure: () -> (NFCReaderApple.TessBaseAPI) -> Swift.Void = { { _ in } })
  convenience public init(language: NFCReaderApple.RecognitionLanguage, dataSource: any NFCReaderApple.LanguageModelDataSource = Bundle.main, engineMode: NFCReaderApple.EngineMode = .lstmOnly, @NFCReaderApple.Tesseract.ConfigurationBuilder configure: () -> (NFCReaderApple.TessBaseAPI) -> Swift.Void = { { _ in } })
  @objc deinit
  public func perform<A>(action: (NFCReaderApple.TessBaseAPI) -> A) -> A
  public func configure(@NFCReaderApple.Tesseract.ConfigurationBuilder _ configure: () -> (NFCReaderApple.TessBaseAPI) -> Swift.Void)
}
public typealias EngineMode = libtesseract.TessOcrEngineMode
extension libtesseract.TessOcrEngineMode {
  public static let tesseractOnly: libtesseract.TessOcrEngineMode
  public static let lstmOnly: libtesseract.TessOcrEngineMode
  public static let tesseractLstmCombined: libtesseract.TessOcrEngineMode
  public static let `default`: libtesseract.TessOcrEngineMode
}
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@available(iOS 13, macOS 10.15, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(NFCReaderApple.DataGroupId, Swift.Int)
  case error(NFCReaderApple.NFCPassportReaderError)
  case successfulRead
}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case error
  case none
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [NFCReaderApple.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [NFCReaderApple.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: NFCReaderApple.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : NFCReaderApple.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@objc @available(iOS 11.0, *)
public class PerspectiveCorrectionParamsOperation : Foundation.Operation {
  public init(pixelBuffer: CoreVideo.CVImageBuffer, orientation: ImageIO.CGImagePropertyOrientation, rect: Vision.VNRectangleObservation)
  @objc override dynamic public func main()
  @objc deinit
}
extension NFCReaderApple.Tesseract {
  public func performOCR(on image: UIKit.UIImage) -> Swift.Result<Swift.String, NFCReaderApple.Tesseract.Error>
  public func recognizedBlocks(from image: UIKit.UIImage, for levels: [NFCReaderApple.PageIteratorLevel]) -> Swift.Result<(Swift.String, [NFCReaderApple.PageIteratorLevel : [NFCReaderApple.RecognizedBlock]]), NFCReaderApple.Tesseract.Error>
  public func recognizedBlocks(from image: UIKit.UIImage, for level: NFCReaderApple.PageIteratorLevel) -> Swift.Result<(Swift.String, [NFCReaderApple.RecognizedBlock]), NFCReaderApple.Tesseract.Error>
}
extension NFCReaderApple.Tesseract {
  @available(iOS 13.0, *)
  public func performOCRPublisher(on image: UIKit.UIImage) -> Combine.AnyPublisher<Swift.String, NFCReaderApple.Tesseract.Error>
}
@objc @_hasMissingDesignatedInitializers public class MrzScanResult : ObjectiveC.NSObject {
  final public let frontImgae: UIKit.UIImage
  final public let backImage: UIKit.UIImage
  final public let documentType: Swift.String
  final public let countryCode: Swift.String
  final public let surnames: Swift.String
  final public let givenNames: Swift.String
  final public let documentNumber: Swift.String
  final public let nationality: Swift.String
  final public let birthDate: Foundation.Date?
  final public let sex: Swift.String?
  final public let expiryDate: Foundation.Date?
  final public let personalNumber: Swift.String
  final public let personalNumber2: Swift.String?
  final public let mrzString: Swift.String
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: NFCReaderApple.CertificateType, b: NFCReaderApple.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [NFCReaderApple.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : NFCReaderApple.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public init(logLevel: NFCReaderApple.LogLevel = .info, masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  #if compiler(>=5.3) && $AsyncAwait
  public func readPassport(mrzKey: Swift.String, tags: [NFCReaderApple.DataGroupId] = [], skipSecureElements: Swift.Bool = true, skipCA: Swift.Bool = false, skipPACE: Swift.Bool = false, customDisplayMessage: ((NFCReaderApple.NFCViewDisplayMessage) -> Swift.String?)? = nil) async throws -> NFCReaderApple.NFCPassportModel
  #endif
  @objc deinit
}
@available(iOS 13, *)
extension NFCReaderApple.PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: NFCReaderApple.DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: NFCReaderApple.PACEMappingType, b: NFCReaderApple.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : NFCReaderApple.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> NFCReaderApple.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> NFCReaderApple.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@objc public protocol TorchSettings {
  @objc var torchLevel: Swift.Float { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : NFCReaderApple.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
extension NFCReaderApple.Tesseract {
  public func performOCR(on data: Foundation.Data) -> Swift.Result<Swift.String, NFCReaderApple.Tesseract.Error>
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> NFCReaderApple.ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> NFCReaderApple.ASN1Item
  public func test()
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case UnsupportedCipherAlgorithm
  case UnsupportedMappingType
  case PACEError(Swift.String, Swift.String)
  case ChipAuthenticationFailed
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension NFCReaderApple.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
@objc public protocol CardAndPassportDetectionViewControllerDelegate {
  @objc func cardAndPassportDetectionViewController(_ viewController: NFCReaderApple.CardAndPassportDetectionViewController, didDetectCard mrzScanResult: NFCReaderApple.MrzScanResult, withSettings settings: NFCReaderApple.CardAndPassportDetectionSettings)
  @objc optional func cardAndPassportDetectionViewControllerDidCancel(_ viewController: NFCReaderApple.CardAndPassportDetectionViewController)
  @objc optional func qualityOfImage(_ image: CoreGraphics.CGImage) -> Foundation.NSNumber?
  @objc func didFail(message: Swift.String)
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName: NFCReaderApple.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : NFCReaderApple.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup12 : NFCReaderApple.DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BaseCardDetectionViewController : NFCReaderApple.ObjectDetectionViewController {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) @objc override public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CardAndPassportDetectionSettings : ObjectiveC.NSObject, NFCReaderApple.TorchSettings {
  @objc public var torchLevel: Swift.Float
  @objc public var passportMode: Swift.Bool
  @objc public var titleString: Swift.String
  @objc public var descriptionString: Swift.String
  @objc public var lang: Swift.String
  @objc final public let cardDetectionSettings: NFCReaderApple.BaseCardDetectionSettings
  @objc final public let barcodeDetectionSettings: NFCReaderApple.BaseBarcodeDetectionSettings
  @objc public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat, barcodeSymbologies: [Vision.VNBarcodeSymbology]) throws
  @objc public init(lang: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension NFCReaderApple.Tesseract {
  public struct Error : Swift.Error, Swift.Equatable {
    public let message: Swift.String
    public init(_ message: Swift.String)
    public static let imageConversionError: NFCReaderApple.Tesseract.Error
    public static let unableToExtractTextFromImage: NFCReaderApple.Tesseract.Error
    public static let unableToRetrieveIterator: NFCReaderApple.Tesseract.Error
    public static func == (a: NFCReaderApple.Tesseract.Error, b: NFCReaderApple.Tesseract.Error) -> Swift.Bool
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> NFCReaderApple.DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [NFCReaderApple.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [NFCReaderApple.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup14 : NFCReaderApple.DataGroup {
  public var securityInfos: [NFCReaderApple.SecurityInfo] {
    get
  }
  @objc deinit
}
extension NFCReaderApple.Tesseract {
  @available(macOS 10.15, iOS 13.0, *)
  public func performOCRPublisher(on data: Foundation.Data) -> Combine.AnyPublisher<Swift.String, NFCReaderApple.Tesseract.Error>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : NFCReaderApple.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: NFCReaderApple.SecureMessagingSupportedAlgorithms, b: NFCReaderApple.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: NFCReaderApple.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ActiveAuthenticationInfo : NFCReaderApple.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getSignatureAlgorithmOIDString() -> Swift.String?
  @objc deinit
}
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: NFCReaderApple.CardAccess, tagReader: NFCReaderApple.TagReader) throws
  #if compiler(>=5.3) && $AsyncAwait
  public func doPACE(mrzKey: Swift.String) async throws
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : NFCReaderApple.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : NFCReaderApple.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: NFCReaderApple.TagReader)
  #if compiler(>=5.3) && $AsyncAwait
  public func performBACAndGetSessionKeys(mrzKey: Swift.String) async throws
  #endif
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CardDetectionSettings : NFCReaderApple.BaseCardDetectionSettings, NFCReaderApple.TorchSettings {
  @objc public var torchLevel: Swift.Float
  @objc override public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class BaseCardDetectionSettings : ObjectiveC.NSObject {
  @objc public enum Orientation : Swift.Int {
    case landscape
    case portrait
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var size: CoreFoundation.CGSize
  @objc public var orientation: NFCReaderApple.BaseCardDetectionSettings.Orientation {
    @objc get
    @objc set
  }
  @objc public var imagePoolSize: Swift.Int
  @objc public init(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @objc convenience override dynamic public init()
  @objc deinit
}
extension NFCReaderApple.Tesseract {
  public struct Variable : Swift.RawRepresentable {
    public init(rawValue: Swift.String)
    public init(_ rawValue: Swift.String)
    public let rawValue: Swift.String
    public typealias RawValue = Swift.String
  }
}
extension NFCReaderApple.Tesseract.Variable : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = NFCReaderApple.Tesseract.Variable.StringLiteralType
  public typealias UnicodeScalarLiteralType = NFCReaderApple.Tesseract.Variable.StringLiteralType
}
extension NFCReaderApple.Tesseract.Variable {
  public static let allowlist: NFCReaderApple.Tesseract.Variable
  public static let disallowlist: NFCReaderApple.Tesseract.Variable
  public static let preserveInterwordSpaces: NFCReaderApple.Tesseract.Variable
  public static let minimumCharacterHeight: NFCReaderApple.Tesseract.Variable
  public static let oldCharacterHeight: NFCReaderApple.Tesseract.Variable
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : NFCReaderApple.DataGroup {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ObjectDetectionViewController : UIKit.UIViewController, UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class CardAndPassportDetectionViewController : NFCReaderApple.BaseCardDetectionViewController {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any NFCReaderApple.CardAndPassportDetectionViewControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) final public let settings: NFCReaderApple.CardAndPassportDetectionSettings
  @objc @_Concurrency.MainActor(unsafe) public init(settings: NFCReaderApple.CardAndPassportDetectionSettings)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func showAlert(message: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class BarcodeDetectionSettings : NFCReaderApple.BaseBarcodeDetectionSettings, NFCReaderApple.TorchSettings {
  @objc public var torchLevel: Swift.Float
  @objc override public init(barcodeSymbologies: [Vision.VNBarcodeSymbology]) throws
  @objc deinit
}
@objc public class BaseBarcodeDetectionSettings : ObjectiveC.NSObject {
  @objc final public let barcodeSymbologies: [Vision.VNBarcodeSymbology]
  @objc public init(barcodeSymbologies: [Vision.VNBarcodeSymbology]) throws
  @objc deinit
}
@objc public enum BarcodeDetectionSettingsError : Swift.Int, Swift.Error {
  case unsupportedBarcodeSymbology
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension NFCReaderApple.PassportAuthenticationStatus : Swift.Equatable {}
extension NFCReaderApple.PassportAuthenticationStatus : Swift.Hashable {}
extension NFCReaderApple.LogLevel : Swift.Equatable {}
extension NFCReaderApple.LogLevel : Swift.Hashable {}
extension NFCReaderApple.LogLevel : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.CertificateType : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.CertificateType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.CertificateItem : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.CertificateItem : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.CertificateItem : Swift.RawRepresentable {}
extension NFCReaderApple.PACEMappingType : Swift.Equatable {}
extension NFCReaderApple.PACEMappingType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.DataGroupId : Swift.RawRepresentable {}
extension NFCReaderApple.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension NFCReaderApple.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension NFCReaderApple.DocTypeEnum : Swift.RawRepresentable {}
extension NFCReaderApple.BaseCardDetectionSettings.Orientation : Swift.Equatable {}
extension NFCReaderApple.BaseCardDetectionSettings.Orientation : Swift.Hashable {}
extension NFCReaderApple.BaseCardDetectionSettings.Orientation : Swift.RawRepresentable {}
extension NFCReaderApple.BarcodeDetectionSettingsError : Swift.Equatable {}
extension NFCReaderApple.BarcodeDetectionSettingsError : Swift.Hashable {}
extension NFCReaderApple.BarcodeDetectionSettingsError : Swift.RawRepresentable {}
